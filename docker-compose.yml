# docker-compose.yml
services:
  ingestion-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ingestion-service
    ports:
      - "8000:8000"
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data:rw # For CLI batch processing
      - ./.cache:/app/.cache # Persist spaCy model cache
    environment:
      PYTHONUNBUFFERED: "1"
      LOG_LEVEL: INFO # Can be overridden by settings.yaml
      # Pass Celery broker URL as env var for explicit config
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
    deploy:
      resources:
        reservations:
          devices:
            # GPU support enabled by default (Fix #3)
            - capabilities: [gpu]
              count: all
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      - redis

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker
    # Use prefork pool with concurrency=4 for better performance (Fix #8)
    command: celery -A src.celery_app worker --loglevel=INFO --pool=prefork --concurrency=4
    volumes:
      - ./data:/app/data:rw
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./.cache:/app/.cache
    environment:
      PYTHONUNBUFFERED: "1"
      LOG_LEVEL: INFO
      CELERY_BROKER_URL: "redis://redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://redis:6379/0"
    deploy:
      resources:
        reservations:
          devices:
            # GPU support for Celery workers
            - capabilities: [gpu]
              count: all
    depends_on:
      - redis
    restart: always

  # Prometheus for metrics collection (Fix #7)
  prometheus:
    image: prom/prometheus:v2.51.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: always
    depends_on:
      - ingestion-service

  # Grafana for visualization (Fix #7)
  grafana:
    image: grafana/grafana:10.4.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: always
    depends_on:
      - prometheus

  # Optional: Elasticsearch (uncomment if using)
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
  #   container_name: elasticsearch
  #   environment:
  #     - xpack.security.enabled=false
  #     - discovery.type=single-node
  #     - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
  #   ports:
  #     - "9200:9200"
  #     - "9300:9300"
  #   volumes:
  #     - es_data:/usr/share/elasticsearch/data
  #   restart: on-failure
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  # Optional: PostgreSQL (uncomment if using)
  # postgres:
  #   image: postgres:16.3-alpine
  #   container_name: postgres
  #   environment:
  #     POSTGRES_DB: newsdb
  #     POSTGRES_USER: user
  #     POSTGRES_PASSWORD: password
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - pg_data:/var/lib/postgresql/data
  #   restart: on-failure
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U user"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  es_data:
  pg_data:
  data:


# docker-compose.yml